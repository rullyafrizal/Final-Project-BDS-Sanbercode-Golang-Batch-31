definitions:
  models.Post:
    properties:
      content:
        type: string
      id:
        type: integer
      post_images:
        items:
          $ref: '#/definitions/models.PostImage'
        type: array
      published_at:
        type: string
      reviews:
        items:
          $ref: '#/definitions/models.Review'
        type: array
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      title:
        type: string
      user_id:
        type: integer
      vote_count:
        type: integer
      votes:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.PostImage:
    properties:
      id:
        type: integer
      post_id:
        type: integer
      url:
        type: string
    type: object
  models.Review:
    properties:
      comment:
        type: string
      id:
        type: integer
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Role:
    properties:
      id:
        type: integer
      name:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Tag:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.User:
    properties:
      avatar:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
      reviews:
        items:
          $ref: '#/definitions/models.Review'
        type: array
    type: object
  requests.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  requests.RegisterRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  requests.ReviewRequest:
    properties:
      comment:
        type: string
    required:
    - comment
    type: object
  requests.StorePostRequest:
    properties:
      content:
        type: string
      post_images:
        items:
          type: string
        type: array
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  requests.StoreUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role_id:
        type: integer
    required:
    - email
    - name
    - password
    - role_id
    type: object
  requests.UpdatePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  requests.UpdateUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  results.IDResult:
    properties:
      id:
        type: integer
    type: object
  results.JSONResult:
    properties:
      data: {}
      message:
        type: string
    type: object
  results.ReviewResult:
    properties:
      review:
        $ref: '#/definitions/requests.ReviewRequest'
    type: object
  results.RoleResult:
    properties:
      role:
        $ref: '#/definitions/models.Role'
    type: object
  results.TokenResult:
    properties:
      token:
        type: string
    type: object
  results.UserResult:
    properties:
      user:
        $ref: '#/definitions/models.User'
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /api/v1/auth/login:
    post:
      description: Login, authenticating user by email and password.
      parameters:
      - description: the request body to authenticate user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.TokenResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/results.JSONResult'
      summary: Login
      tags:
      - Auth
  /api/v1/auth/me:
    get:
      description: Fetch authenticated user account data.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.UserResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/results.JSONResult'
      summary: Fetch authenticated user
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      description: Register, create new user account.
      parameters:
      - description: the request body to create a new user account
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/results.JSONResult'
      summary: Registering a new account
      tags:
      - Auth
  /api/v1/auth/update-password:
    put:
      description: Update user authenticated password.
      parameters:
      - description: the request body to update a password
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.UpdatePasswordRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/results.JSONResult'
      summary: Update account password
      tags:
      - Posts
  /api/v1/posts:
    get:
      description: Get a list of published posts.
      parameters:
      - description: search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Post'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Get all published posts
      tags:
      - Posts
  /api/v1/posts/:
    post:
      description: Create a new post.
      parameters:
      - description: the request body to create a new post
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.StorePostRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/requests.StorePostRequest'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/results.JSONResult'
      summary: Create new post
      tags:
      - Posts
  /api/v1/posts/{id}:
    delete:
      description: Delete an existing post by ID, you can only delete your own post.
      parameters:
      - description: post id
        in: path
        name: id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete a post
      tags:
      - Posts
    get:
      description: Get a post by inserting ID in route param (only published post
        will return the result).
      parameters:
      - description: post id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Post'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Get published post by ID
      tags:
      - Posts
    put:
      description: Update an existing post by ID, you can only update your own post.
      parameters:
      - description: post id
        in: path
        name: id
        required: true
        type: string
      - description: the request body to update a post
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.StorePostRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/requests.StorePostRequest'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/results.JSONResult'
      summary: Update a post
      tags:
      - Posts
  /api/v1/posts/{id}/my:
    get:
      description: Get user authenticated post by inserting ID in route param.
      parameters:
      - description: post id
        in: path
        name: id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Post'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Get authenticated user post by ID
      tags:
      - Posts
  /api/v1/posts/{id}/publish:
    patch:
      description: Publish an existing post by ID, you can only publish your own post.
      parameters:
      - description: post id
        in: path
        name: id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: integer
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/results.JSONResult'
      summary: Publish a post
      tags:
      - Posts
  /api/v1/posts/{id}/reviews:
    post:
      description: Create a new post review.
      parameters:
      - description: the request body to create a new post review
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.ReviewRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: post id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.ReviewResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/results.JSONResult'
      summary: Create new post review
      tags:
      - Post Reviews
  /api/v1/posts/{id}/reviews/{review_id}:
    delete:
      description: Delete an existing post review by ID.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: post id
        in: path
        name: id
        required: true
        type: string
      - description: review id
        in: path
        name: review_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.IDResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/results.JSONResult'
      summary: Delete post review
      tags:
      - Post Reviews
    put:
      description: Update an existing post review by ID.
      parameters:
      - description: the request body to update a post review
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.ReviewRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: post id
        in: path
        name: id
        required: true
        type: string
      - description: review id
        in: path
        name: review_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.ReviewResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/results.JSONResult'
      summary: Update post review
      tags:
      - Post Reviews
  /api/v1/posts/{id}/votes/down:
    get:
      description: Downvote a post by inserting ID in route param, you can only do
        it once per post.
      parameters:
      - description: post id
        in: path
        name: id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.IDResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Downvote a post
      tags:
      - Post Votes
  /api/v1/posts/{id}/votes/up:
    get:
      description: Upvote a post by inserting ID in route param, you can only do it
        once per post.
      parameters:
      - description: post id
        in: path
        name: id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.IDResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Upvote a post
      tags:
      - Post Votes
  /api/v1/posts/my:
    get:
      description: Get a list of authenticated user posts.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Post'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Get all authenticated user posts
      tags:
      - Posts
  /api/v1/roles:
    get:
      description: Get a list of roles, only admin can do this.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/results.RoleResult'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Get all roles (admin only)
      tags:
      - Roles
    post:
      description: Create a new role, only admin can do this.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: the request body to create a new role
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.RoleResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Create new role (admin only)
      tags:
      - Roles
  /api/v1/roles/{id}:
    delete:
      description: Delete an existing role by ID, only admin can do this.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: the role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.IDResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete role by ID (admin only)
      tags:
      - Roles
    post:
      description: Create an existing role by ID, only admin can do this.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: the role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.RoleResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Get role by ID (admin only)
      tags:
      - Roles
    put:
      description: Update an existing role by ID, only admin can do this.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: the role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.RoleResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Update role by ID (admin only)
      tags:
      - Roles
  /api/v1/users:
    get:
      description: Get a list of users, this endpoint only for admin.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/results.UserResult'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Get all users (admin only)
      tags:
      - Users
    post:
      description: Create new user, this endpoint only for admin.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.StoreUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.UserResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Create new user (admin only)
      tags:
      - Users
  /api/v1/users/{id}:
    delete:
      description: Delete user by ID, you can only delete your own data.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.IDResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete user by ID
      tags:
      - Users
    get:
      description: Get an existing user byID.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.UserResult'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Get user by ID
      tags:
      - Users
    put:
      description: Update user by ID, you can only update your own data.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/results.UserResult'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  items:
                    additionalProperties:
                      type: string
                    type: object
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/results.JSONResult'
            - properties:
                data:
                  type: string
              type: object
      summary: Update user by ID
      tags:
      - Users
swagger: "2.0"
